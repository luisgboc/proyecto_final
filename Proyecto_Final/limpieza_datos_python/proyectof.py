# -*- coding: utf-8 -*-
"""proyectof.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qrFEQjhn8hfFRQ80eY5IqkpkRNlafr5T
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import gspread
from google.colab import auth
from oauth2client.client import GoogleCredentials
from google.auth import default
from google.colab import files
from google.colab import drive

drive.mount('/content/drive')
#print(drive.mount)
# %cd "/content/drive/My Drive/datospython/proyecto_final_adatos"
# %pwd
# %ls

# Especifica la ruta completa del archivo CSV
data = pd.read_csv('/content/drive/My Drive/datospython/proyecto_final_adatos/japan_china.csv')

# Mostrar las primeras filas del DataFrame
data.head(10)

# Resumen de data
data.info()

# Describir las estadísticas del DataFrame
print(data.describe())

# Contar el número de entradas por país
country_counts = data['Country'].value_counts()
print(country_counts)


# Filtrar datos para un país específico
japan_data = data[data['Country'] == 'Japan']
japan_data.head(10)

# Convertir numeros exponenciales a enteros
columns_to_convert = ['R&D Investment (in USD)', 'Tech Exports (in USD)']
data[columns_to_convert] = data[columns_to_convert].astype('int')

# Verifica el tipo de datos antes de la conversión
print("Antes de la conversión:")
print(data.dtypes)
# Configurar pandas para que muestre todos los números en formato entero
pd.set_option('display.float_format', '{:.0f}'.format)

# Resumen de data
data.info()

# Describir las estadísticas del DataFrame
print(data.describe())

# Contar el número de entradas por país
country_counts = data['Country'].value_counts()
print(country_counts)

# Filtrar datos para un país específico
japan_data = data[data['Country'] == 'Japan']
print(japan_data)

# Imprimir el DataFrame para verificar la visualización
print(data[['R&D Investment (in USD)', 'Tech Exports (in USD)']])

# Cambio de formato de datos
  # Check for any missing values
missing_values = data.isnull().sum()
missing_values[missing_values > 0]  # Display columns with missing values

# Fill missing values with median or mean based on column types
data['5G Network Coverage (%)'] = data['5G Network Coverage (%)'].fillna(data['5G Network Coverage (%)'].mean())
data['Number of Startups'] = data['Number of Startups'].fillna(data['Number of Startups'].median())

# Verify missing values have been handled
data.isnull().sum().sum()  # Should return 0 if no missing values remain

# Configurar estilo de visualización
sns.set(style="whitegrid", font_scale=1.2)

# Paleta de colores
palette = sns.color_palette("coolwarm", n_colors = 2)

# Gráfico de barras de la participación de mercado promedio por sector tecnológico
plt.figure(figsize=(12, 6))
sns.barplot(data=data, x='Tech Sector', y='Market Share (%)', hue='Country', estimator=np.mean, palette=palette)
plt.xticks(rotation=45)
plt.title('Participación de Mercado Promedio por Sector Tecnológico')
plt.ylabel('Participación de Mercado (%)')
plt.xlabel('Sector Tecnológico')
plt.show()

# Gráfico de patentes anuales
plt.figure(figsize=(12, 6))
sns.lineplot(data=data, x='Year', y='Number of Patents Filed (Annual)', hue='Country', style='Country', markers=True)
plt.title('Number of Patents Filed Over Time (China vs Japan)')
plt.xlabel('Year')
plt.ylabel('Number of Patents Filed')
plt.grid(True)
plt.show()

# Crear gráfico de líneas para comparar entre países por año (trabajadores tecnologicos)
plt.figure(figsize=(10, 6))
sns.lineplot(data=data, x='Year', y='Number of Tech Workers',  hue='Country', style='Country', markers=True)
plt.title('Comparación del Número de Trabajadores Tecnológicos entre Países por Año')
plt.ylabel('Número de Trabajadores Tecnológicos')
plt.xlabel('Año')
plt.grid(True)
plt.show()

# Crear gráfico de líneas para comparar entre países por año (startups)
plt.figure(figsize=(10, 6))
sns.lineplot(data=data, x='Year', y='Number of Startups',  hue='Country', style='Country', markers=True)
plt.title('Comparación del Number of Startups entre Países por Año')
plt.ylabel('Number of Startups')
plt.xlabel('Año')
plt.grid(True)
plt.show()

# Group by Tech Sector and Country
sector_share = data.groupby(['Tech Sector', 'Country'])['Market Share (%)'].mean().unstack()

# Plot stacked bar chart
sector_share.plot(kind='bar', stacked=True, figsize=(10, 6), colormap='Paired')
plt.title('Market Share Distribution by Tech Sector (China vs Japan)')
plt.ylabel('Average Market Share (%)')
plt.legend(title='Country')
plt.xticks(rotation=45)
plt.show()

# Obtener los top 10 productos exportados por Japón y China
japan_top_exports = data[data['Country'] == 'Japan']['Top Tech Products Exported'].value_counts().head(10)
china_top_exports = data[data['Country'] == 'China']['Top Tech Products Exported'].value_counts().head(10)

# Combinar los dos DataFrames
combined_exports = pd.DataFrame({'Japan': japan_top_exports, 'China': china_top_exports}).fillna(0)

# Crear gráfico de barras agrupadas
plt.figure(figsize=(12, 6))
combined_exports.plot(kind='bar', color=['orange', 'teal'], width=0.8)

# Añadir títulos y etiquetas
plt.title('Top Tech Products Exported by Japan and China')
plt.xlabel('Tech Products')
plt.ylabel('Frequency')
plt.xticks(rotation=45)

# Mostrar leyenda
plt.legend(title='Country')

# Obtener los top 10 productos exportados por Japón y China
japan_top_exports = data[data['Country'] == 'Japan']['Top Tech Products Exported'].value_counts().head(10)
china_top_exports = data[data['Country'] == 'China']['Top Tech Products Exported'].value_counts().head(10)

# Calcular las exportaciones en USD por producto
japan_exports_usd = data[data['Country'] == 'Japan'].groupby('Top Tech Products Exported')['Tech Exports (in USD)'].sum().reindex(japan_top_exports.index)
china_exports_usd = data[data['Country'] == 'China'].groupby('Top Tech Products Exported')['Tech Exports (in USD)'].sum().reindex(china_top_exports.index)

# Combinar los DataFrames
combined_exports = pd.DataFrame({
    'Japan Frequency': japan_top_exports,
    'China Frequency': china_top_exports,
    'Japan Exports (USD)': japan_exports_usd,
    'China Exports (USD)': china_exports_usd
}).fillna(0)

# Configurar el estilo de Seaborn
sns.set(style="whitegrid", font_scale=1.1)

# Crear gráfico de barras agrupadas
fig, ax1 = plt.subplots(figsize=(12, 6))

# Gráfica de frecuencia
combined_exports[['Japan Frequency', 'China Frequency']].plot(kind='bar', ax=ax1, width=0.4, alpha=0.8)

# Crear un segundo eje Y para las exportaciones en USD
ax2 = ax1.twinx()

# Gráfica de líneas para las exportaciones
combined_exports[['Japan Exports (USD)', 'China Exports (USD)']].plot(kind='line', ax=ax2, marker='o', linewidth=2)

# Ajustar los colores
bar_colors = ['#FFA07A', '#20B2AA']  # Coral Light y Light Sea Green
line_colors = ['#FF6347', '#4682B4']  # Tomato y Steel Blue

# Asignar colores a las barras
for i, bar in enumerate(ax1.patches):
    bar.set_color(bar_colors[i % 2])

# Asignar colores a las líneas
ax2.lines[0].set_color(line_colors[0])  # Japón
ax2.lines[1].set_color(line_colors[1])  # China

# Añadir títulos y etiquetas
ax1.set_title('Top Tech Products Exported by Japan and China', fontsize=16)
ax1.set_xlabel('Tech Products', fontsize=14)
ax1.set_ylabel('Frequency', fontsize=14)
ax2.set_ylabel('Tech Exports (in USD)', fontsize=14)
ax1.set_xticklabels(combined_exports.index, rotation=45)
ax1.yaxis.grid(False)
ax1.xaxis.grid(False)

# Mostrar leyenda
ax1.legend(['Japan Frequency', 'China Frequency'], title='Frequency', loc='upper left', fontsize=12)
ax2.legend(['Japan Exports (USD)', 'China Exports (USD)'], title='Exports in USD', loc='upper right', fontsize=12)

# Ajustar el layout y mostrar el gráfico
plt.tight_layout()
plt.show()

# Crear la gráfica
plt.figure(figsize=(12, 6))
sns.lineplot(data=data[data['Country'].isin(['Japan', 'China'])],
             x='Year',
             y='R&D Investment (in USD)',
             hue='Country',
             marker='o',
             palette='pastel')  # Cambiar la paleta a colores más suaves

# Añadir títulos y etiquetas
plt.title('Inversion en I+D en el tiempo Japan and China', fontsize=16)
plt.xlabel('Año', fontsize=14)
plt.ylabel('Inversion en I+D (USD Billions)', fontsize=14)
plt.xticks(fontsize=15)  # Ajustar tamaño de texto en el eje x
plt.yticks(fontsize=15)  # Ajustar tamaño de texto en el eje y
plt.grid(visible=True, linestyle='--', linewidth=1)  # Cambiar estilo de la cuadrícula

# Mostrar la gráfica
plt.show()

# Distribucion de patentes
plt.figure(figsize=(10, 6))
sns.boxplot(data=data[data['Country'].isin(['Japan', 'China'])],
            x='Country',
            y='Number of Patents Filed (Annual)',
            palette='Set2')
plt.title('Distribution of Patents Filed by Japan and China')
plt.xlabel('Country')
plt.ylabel('Number of Patents Filed')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(data=data[data['Country'].isin(['Japan', 'China'])],
            x='Country',
            y='5G Network Coverage (%)',
            palette='pastel')
plt.title('5G Network Coverage Comparison Between Japan and China')
plt.xlabel('Country')
plt.ylabel('5G Network Coverage (%)')
plt.show()